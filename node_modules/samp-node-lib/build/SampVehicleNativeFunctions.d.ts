export declare class SampVehicleNativeFunctions {
    constructor(vehicleId: number);
    protected _vehicleId: number;
    Attach3DTextLabelToVehicle(id: number, OffsetX: number, OffsetY: number, OffsetZ: number): number;
    AttachObjectToVehicle(objectid: number, OffsetX: number, OffsetY: number, OffsetZ: number, RotX: number, RotY: number, RotZ: number): number;
    DestroyVehicle(): number;
    IsVehicleStreamedIn(forplayerid: number): number;
    GetVehiclePos(): {
        x: any;
        y: any;
        z: any;
    };
    SetVehiclePos(x: number, y: number, z: number): number;
    GetVehicleZAngle(): number;
    GetVehicleRotationQuat(): Array<any>;
    SetVehicleZAngle(z_angle: number): number;
    SetVehicleParamsEx(engine: number, lights: number, alarm: number, doors: number, bonnet: number, boot: number, objective: number): number;
    GetVehicleParamsEx(): Array<any>;
    GetVehicleParamsSirenState(): number;
    SetVehicleParamsCarDoors(driver: number, passenger: number, backleft: number, backright: number): number;
    GetVehicleParamsCarDoors(): {
        driver: 0 | 1 | -1;
        passenger: 0 | 1 | -1;
        backleft: 0 | 1 | -1;
        backright: 0 | 1 | -1;
    };
    SetVehicleParamsCarWindows(driver: number, passenger: number, backleft: number, backright: number): number;
    GetVehicleParamsCarWindows(): {
        driver: 0 | 1 | -1;
        passenger: 0 | 1 | -1;
        backleft: 0 | 1 | -1;
        backright: 0 | 1 | -1;
    };
    SetVehicleToRespawn(): number;
    LinkVehicleToInterior(interiorid: number): number;
    AddVehicleComponent(componentid: number): number;
    RemoveVehicleComponent(componentid: number): number;
    ChangeVehicleColor(color1: number, color2: number): number;
    ChangeVehiclePaintjob(paintjobid: number): number;
    SetVehicleHealth(health: number): number;
    GetVehicleHealth(): number;
    AttachTrailerToVehicle(trailerid: number): number;
    DetachTrailerFromVehicle(): number;
    IsTrailerAttachedToVehicle(): number;
    GetVehicleTrailer(): number;
    SetVehicleNumberPlate(numberplate: string): number;
    GetVehicleModel(): number;
    GetVehicleComponentInSlot(slot: number): number;
    RepairVehicle(): number;
    GetVehicleVelocity(): Array<any>;
    SetVehicleVelocity(X: number, Y: number, Z: number): number;
    SetVehicleAngularVelocity(X: number, Y: number, Z: number): number;
    GetVehicleDamageStatus(): {
        panels: any;
        doors: any;
        lights: any;
        tires: any;
    };
    UpdateVehicleDamageStatus(panels: number, doors: number, lights: number, tires: number): number;
    SetVehicleVirtualWorld(worldid: number): number;
    GetVehicleVirtualWorld(): number;
    IsValidVehicle(): number;
}
