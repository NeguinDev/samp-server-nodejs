import { SampPlayer } from "samp-node-lib/build/SampPlayer";
import { SampVehicle } from "samp-node-lib/build/SampVehicle";
export declare class Game<P, V> {
    OnGameModeInit(func: () => void): void;
    OnGameModeExit(func: () => void): void;
    OnFilterScriptInit(func: () => void): void;
    OnFilterScriptExit(func: () => void): void;
    OnPlayerConnect(func: (player: SampPlayer<P>) => void): void;
    OnPlayerDisconnect(func: (player: SampPlayer<P>, reason: number) => void): void;
    OnPlayerSpawn(func: (player: SampPlayer<P>) => void): void;
    OnPlayerDeath(func: (player: SampPlayer<P>, killer: SampPlayer<P>, reason: number) => void): void;
    OnVehicleSpawn(func: (vehicle: SampVehicle<V>) => void): void;
    OnVehicleDeath(func: (vehicle: SampVehicle<V>, killer: SampPlayer<P>) => void): void;
    OnPlayerText(func: (player: SampPlayer<P>, text: string) => void): void;
    OnPlayerCommandText(func: (player: SampPlayer<P>, cmdtext: string) => void): void;
    OnPlayerRequestClass(func: (player: SampPlayer<P>, classid: number) => void): void;
    OnPlayerEnterVehicle(func: (player: SampPlayer<P>, vehicle: SampVehicle<V>, ispassenger: number) => void): void;
    OnPlayerExitVehicle(func: (player: SampPlayer<P>, vehicle: SampVehicle<V>) => void): void;
    OnPlayerStateChange(func: (player: SampPlayer<P>, newstate: number, oldstate: number) => void): void;
    OnPlayerEnterCheckpoint(func: (player: SampPlayer<P>) => void): void;
    OnPlayerLeaveCheckpoint(func: (player: SampPlayer<P>) => void): void;
    OnPlayerEnterRaceCheckpoint(func: (player: SampPlayer<P>) => void): void;
    OnPlayerLeaveRaceCheckpoint(func: (player: SampPlayer<P>) => void): void;
    OnRconCommand(func: (cmd: string) => void): void;
    OnPlayerRequestSpawn(func: (player: SampPlayer<P>) => void): void;
    OnObjectMoved(func: (objectid: number) => void): void;
    OnPlayerObjectMoved(func: (player: SampPlayer<P>, objectid: number) => void): void;
    OnPlayerPickUpPickup(func: (player: SampPlayer<P>, pickupid: number) => void): void;
    OnVehicleMod(func: (player: SampPlayer<P>, vehicle: SampVehicle<V>, componentid: number) => void): void;
    OnEnterExitModShop(func: (player: SampPlayer<P>, enterexit: number, interiorid: number) => void): void;
    OnVehiclePaintjob(func: (player: SampPlayer<P>, vehicle: SampVehicle<V>, paintjobid: number) => void): void;
    OnVehicleRespray(func: (player: SampPlayer<P>, vehicle: SampVehicle<V>, color1: number, color2: number) => void): void;
    OnVehicleDamageStatusUpdate(func: (vehicle: SampVehicle<V>, player: SampPlayer<P>) => void): void;
    OnUnoccupiedVehicleUpdate(func: (vehicle: SampVehicle<V>, player: SampPlayer<P>, passenger_seat: number, new_x: number, new_y: number, new_z: number, vel_x: number, vel_y: number, vel_z: number) => void): void;
    OnPlayerSelectedMenuRow(func: (player: SampPlayer<P>, row: number) => void): void;
    OnPlayerExitedMenu(func: (player: SampPlayer<P>) => void): void;
    OnPlayerInteriorChange(func: (player: SampPlayer<P>, newinteriorid: number, oldinteriorid: number) => void): void;
    OnPlayerKeyStateChange(func: (player: SampPlayer<P>, newkeys: number, oldkeys: number) => void): void;
    OnRconLoginAttempt(func: (ip: string, password: string, success: number) => void): void;
    OnPlayerUpdate(func: (player: SampPlayer<P>) => void): void;
    OnPlayerStreamIn(func: (player: SampPlayer<P>, forplayer: SampPlayer<P>) => void): void;
    OnPlayerStreamOut(func: (player: SampPlayer<P>, forplayer: SampPlayer<P>) => void): void;
    OnVehicleStreamIn(func: (vehicle: SampVehicle<V>, forplayer: SampPlayer<P>) => void): void;
    OnVehicleStreamOut(func: (vehicle: SampVehicle<V>, forplayer: SampPlayer<P>) => void): void;
    OnActorStreamIn(func: (actorid: number, forplayer: SampPlayer<P>) => void): void;
    OnActorStreamOut(func: (actorid: number, forplayer: SampPlayer<P>) => void): void;
    OnDialogResponse(func: (player: SampPlayer<P>, dialogid: number, response: number, listitem: number, inputtext: string) => void): void;
    OnPlayerTakeDamage(func: (player: SampPlayer<P>, issuer: SampPlayer<P>, amount: number, weaponid: number, bodypart: number) => void): void;
    OnPlayerGiveDamage(func: (player: SampPlayer<P>, damaged: SampPlayer<P>, amount: number, weaponid: number, bodypart: number) => void): void;
    OnPlayerGiveDamageActor(func: (player: SampPlayer<P>, damaged_actorid: number, amount: number, weaponid: number, bodypart: number) => void): void;
    OnPlayerClickMap(func: (player: SampPlayer<P>, fX: number, fY: number, fZ: number) => void): void;
    OnPlayerClickTextDraw(func: (player: SampPlayer<P>, clickedid: number) => void): void;
    OnPlayerClickPlayerTextDraw(func: (player: SampPlayer<P>, playertextid: number) => void): void;
    OnIncomingConnection(func: (player: SampPlayer<P>, ip_address: string, port: number) => void): void;
    OnTrailerUpdate(func: (player: SampPlayer<P>, vehicle: SampVehicle<V>) => void): void;
    OnVehicleSirenStateChange(func: (player: SampPlayer<P>, vehicle: SampVehicle<V>, newstate: number) => void): void;
    OnPlayerFinishedDownloading(func: (player: SampPlayer<P>, virtualworld: number) => void): void;
    OnPlayerClickPlayer(func: (player: SampPlayer<P>, clickedplayer: SampPlayer<P>, source: number) => void): void;
    OnPlayerSelectObject(func: (player: SampPlayer<P>, type: number, objectid: number, modelid: number, fX: number, fY: number, fZ: number) => void): void;
    OnPlayerWeaponShot(func: (player: SampPlayer<P>, weaponid: number, hittype: number, hitid: number, fX: number, fY: number, fZ: number) => void): void;
    OnClientCheckResponse(func: (player: SampPlayer<P>, actionid: number, memaddr: number, retndata: number) => void): void;
    OnScriptCash(func: (player: SampPlayer<P>, amount: number, source: number) => void): void;
}
