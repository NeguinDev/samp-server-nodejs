"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetVehicleModelId = exports.GetVehicleName = exports.vehicleNames = void 0;
const SampFunctions_1 = require("samp-node-lib/build/SampFunctions");
exports.vehicleNames = [
    "Landstalker",
    "Bravura",
    "Buffalo",
    "Linerunner",
    "Perrenial",
    "Sentinel",
    "Dumper",
    "Firetruck",
    "Trashmaster",
    "Stretch",
    "Manana",
    "Infernus",
    "Voodoo",
    "Pony",
    "Mule",
    "Cheetah",
    "Ambulance",
    "Leviathan",
    "Moonbeam",
    "Esperanto",
    "Taxi",
    "Washington",
    "Bobcat",
    "Whoopee",
    "BF Injection",
    "Hunter",
    "Premier",
    "Enforcer",
    "Securicar",
    "Banshee",
    "Predator",
    "Bus",
    "Rhino",
    "Barracks",
    "Hotknife",
    "Trailer",
    "Previon",
    "Coach",
    "Cabbie",
    "Stallion",
    "Rumpo",
    "RC Bandit",
    "Romero",
    "Packer",
    "Monster",
    "Admiral",
    "Squalo",
    "Seasparrow",
    "Pizzaboy",
    "Tram",
    "Trailer",
    "Turismo",
    "Speeder",
    "Reefer",
    "Tropic",
    "Flatbed",
    "Yankee",
    "Caddy",
    "Solair",
    "Berkley's RC Van",
    "Skimmer",
    "PCJ-600",
    "Faggio",
    "Freeway",
    "RC Baron",
    "RC Raider",
    "Glendale",
    "Oceanic",
    "Sanchez",
    "Sparrow",
    "Patriot",
    "Quad",
    "Coastguard",
    "Dinghy",
    "Hermes",
    "Sabre",
    "Rustler",
    "ZR-350",
    "Walton",
    "Regina",
    "Comet",
    "BMX",
    "Burrito",
    "Camper",
    "Marquis",
    "Baggage",
    "Dozer",
    "Maverick",
    "News Chopper",
    "Rancher",
    "FBI Rancher",
    "Virgo",
    "Greenwood",
    "Jetmax",
    "Hotring",
    "Sandking",
    "Blista Compact",
    "Police Maverick",
    "Boxvillde",
    "Benson",
    "Mesa",
    "RC Goblin",
    "Hotring Racer A",
    "Hotring Racer B",
    "Bloodring Banger",
    "Rancher",
    "Super GT",
    "Elegant",
    "Journey",
    "Bike",
    "Mountain Bike",
    "Beagle",
    "Cropduster",
    "Stunt",
    "Tanker",
    "Roadtrain",
    "Nebula",
    "Majestic",
    "Buccaneer",
    "Shamal",
    "Hydra",
    "FCR-900",
    "NRG-500",
    "HPV1000",
    "Cement Truck",
    "Tow Truck",
    "Fortune",
    "Cadrona",
    "FBI Truck",
    "Willard",
    "Forklift",
    "Tractor",
    "Combine",
    "Feltzer",
    "Remington",
    "Slamvan",
    "Blade",
    "Freight",
    "Streak",
    "Vortex",
    "Vincent",
    "Bullet",
    "Clover",
    "Sadler",
    "Firetruck",
    "Hustler",
    "Intruder",
    "Primo",
    "Cargobob",
    "Tampa",
    "Sunrise",
    "Merit",
    "Utility",
    "Nevada",
    "Yosemite",
    "Windsor",
    "Monster",
    "Monster",
    "Uranus",
    "Jester",
    "Sultan",
    "Stratum",
    "Elegy",
    "Raindance",
    "RC Tiger",
    "Flash",
    "Tahoma",
    "Savanna",
    "Bandito",
    "Freight Flat",
    "Streak Carriage",
    "Kart",
    "Mower",
    "Dune",
    "Sweeper",
    "Broadway",
    "Tornado",
    "AT-400",
    "DFT-30",
    "Huntley",
    "Stafford",
    "BF-400",
    "News Van",
    "Tug",
    "Trailer",
    "Emperor",
    "Wayfarer",
    "Euros",
    "Hotdog",
    "Club",
    "Freight Box",
    "Trailer",
    "Andromada",
    "Dodo",
    "RC Cam",
    "Launch",
    "Police Car",
    "Police Car",
    "Police Car",
    "Police Ranger",
    "Picador",
    "S.W.A.T",
    "Alpha",
    "Phoenix",
    "Glendale",
    "Sadler",
    "Luggage",
    "Luggage",
    "Stairs",
    "Boxville",
    "Tiller",
    "Utility Trailer"
];
const simplified_vehicleNames = exports.vehicleNames.map(name => name.toLowerCase().replace(/([^a-z])/g, ''));
function GetVehicleName(vehicleid) {
    return exports.vehicleNames[(0, SampFunctions_1.GetVehicleModel)(vehicleid) - 400];
}
exports.GetVehicleName = GetVehicleName;
function GetVehicleModelId(vehicleName) {
    vehicleName = vehicleName.toLowerCase().replace(/([^a-z])/g, '');
    const potential = simplified_vehicleNames.map((name, i) => ({
        name,
        i,
    })).filter(({ name }) => name.indexOf(vehicleName) >= 0);
    if (potential.length === 0) {
        return null;
    }
    if (potential.length === 1) {
        return potential[0].i + 400;
    }
    let rank = 0;
    if (potential[0].name === vehicleName) {
        return potential[0].i + 400;
    }
    else if (potential[0].name.indexOf(vehicleName) === 0) {
        rank = 10000 + (potential[0].name.length - vehicleName.length);
    }
    else {
        rank = 100 + (potential[0].name.length - vehicleName.length);
    }
    let result = {
        i: potential[0].i,
        rank,
    };
    for (let i = 1; i < potential.length; i++) {
        if (potential[i].name === vehicleName) {
            return potential[0].i + 400;
        }
        else if (potential[i].name.indexOf(vehicleName) === 0) {
            const rank = 10000 + (potential[i].name.length - vehicleName.length);
            if (rank > result.rank) {
                result = {
                    i: potential[i].i,
                    rank,
                };
            }
        }
        const rank = 100 + (potential[i].name.length - vehicleName.length);
        if (rank > result.rank) {
            result = {
                i: potential[i].i,
                rank,
            };
        }
    }
    return result.i + 400;
}
exports.GetVehicleModelId = GetVehicleModelId;
//# sourceMappingURL=VehicleNames.js.map