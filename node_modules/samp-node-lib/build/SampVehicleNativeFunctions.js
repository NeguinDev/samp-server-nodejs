"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SampVehicleNativeFunctions = void 0;
const SampFunctions_1 = require("./SampFunctions");
class SampVehicleNativeFunctions {
    constructor(vehicleId) {
        this._vehicleId = vehicleId;
    }
    Attach3DTextLabelToVehicle(id, OffsetX, OffsetY, OffsetZ) {
        return (0, SampFunctions_1.Attach3DTextLabelToVehicle)(id, this._vehicleId, OffsetX, OffsetY, OffsetZ);
    }
    AttachObjectToVehicle(objectid, OffsetX, OffsetY, OffsetZ, RotX, RotY, RotZ) {
        return (0, SampFunctions_1.AttachObjectToVehicle)(objectid, this._vehicleId, OffsetX, OffsetY, OffsetZ, RotX, RotY, RotZ);
    }
    DestroyVehicle() {
        return (0, SampFunctions_1.DestroyVehicle)(this._vehicleId);
    }
    IsVehicleStreamedIn(forplayerid) {
        return (0, SampFunctions_1.IsVehicleStreamedIn)(this._vehicleId, forplayerid);
    }
    GetVehiclePos() {
        return (0, SampFunctions_1.GetVehiclePos)(this._vehicleId);
    }
    SetVehiclePos(x, y, z) {
        return (0, SampFunctions_1.SetVehiclePos)(this._vehicleId, x, y, z);
    }
    GetVehicleZAngle() {
        return (0, SampFunctions_1.GetVehicleZAngle)(this._vehicleId);
    }
    GetVehicleRotationQuat() {
        return (0, SampFunctions_1.GetVehicleRotationQuat)(this._vehicleId);
    }
    SetVehicleZAngle(z_angle) {
        return (0, SampFunctions_1.SetVehicleZAngle)(this._vehicleId, z_angle);
    }
    SetVehicleParamsEx(engine, lights, alarm, doors, bonnet, boot, objective) {
        return (0, SampFunctions_1.SetVehicleParamsEx)(this._vehicleId, engine, lights, alarm, doors, bonnet, boot, objective);
    }
    GetVehicleParamsEx() {
        return (0, SampFunctions_1.GetVehicleParamsEx)(this._vehicleId);
    }
    GetVehicleParamsSirenState() {
        return (0, SampFunctions_1.GetVehicleParamsSirenState)(this._vehicleId);
    }
    SetVehicleParamsCarDoors(driver, passenger, backleft, backright) {
        return (0, SampFunctions_1.SetVehicleParamsCarDoors)(this._vehicleId, driver, passenger, backleft, backright);
    }
    GetVehicleParamsCarDoors() {
        return (0, SampFunctions_1.GetVehicleParamsCarDoors)(this._vehicleId);
    }
    SetVehicleParamsCarWindows(driver, passenger, backleft, backright) {
        return (0, SampFunctions_1.SetVehicleParamsCarWindows)(this._vehicleId, driver, passenger, backleft, backright);
    }
    GetVehicleParamsCarWindows() {
        return (0, SampFunctions_1.GetVehicleParamsCarWindows)(this._vehicleId);
    }
    SetVehicleToRespawn() {
        return (0, SampFunctions_1.SetVehicleToRespawn)(this._vehicleId);
    }
    LinkVehicleToInterior(interiorid) {
        return (0, SampFunctions_1.LinkVehicleToInterior)(this._vehicleId, interiorid);
    }
    AddVehicleComponent(componentid) {
        return (0, SampFunctions_1.AddVehicleComponent)(this._vehicleId, componentid);
    }
    RemoveVehicleComponent(componentid) {
        return (0, SampFunctions_1.RemoveVehicleComponent)(this._vehicleId, componentid);
    }
    ChangeVehicleColor(color1, color2) {
        return (0, SampFunctions_1.ChangeVehicleColor)(this._vehicleId, color1, color2);
    }
    ChangeVehiclePaintjob(paintjobid) {
        return (0, SampFunctions_1.ChangeVehiclePaintjob)(this._vehicleId, paintjobid);
    }
    SetVehicleHealth(health) {
        return (0, SampFunctions_1.SetVehicleHealth)(this._vehicleId, health);
    }
    GetVehicleHealth() {
        return (0, SampFunctions_1.GetVehicleHealth)(this._vehicleId);
    }
    AttachTrailerToVehicle(trailerid) {
        return (0, SampFunctions_1.AttachTrailerToVehicle)(trailerid, this._vehicleId);
    }
    DetachTrailerFromVehicle() {
        return (0, SampFunctions_1.DetachTrailerFromVehicle)(this._vehicleId);
    }
    IsTrailerAttachedToVehicle() {
        return (0, SampFunctions_1.IsTrailerAttachedToVehicle)(this._vehicleId);
    }
    GetVehicleTrailer() {
        return (0, SampFunctions_1.GetVehicleTrailer)(this._vehicleId);
    }
    SetVehicleNumberPlate(numberplate) {
        return (0, SampFunctions_1.SetVehicleNumberPlate)(this._vehicleId, numberplate);
    }
    GetVehicleModel() {
        return (0, SampFunctions_1.GetVehicleModel)(this._vehicleId);
    }
    GetVehicleComponentInSlot(slot) {
        return (0, SampFunctions_1.GetVehicleComponentInSlot)(this._vehicleId, slot);
    }
    RepairVehicle() {
        return (0, SampFunctions_1.RepairVehicle)(this._vehicleId);
    }
    GetVehicleVelocity() {
        return (0, SampFunctions_1.GetVehicleVelocity)(this._vehicleId);
    }
    SetVehicleVelocity(X, Y, Z) {
        return (0, SampFunctions_1.SetVehicleVelocity)(this._vehicleId, X, Y, Z);
    }
    SetVehicleAngularVelocity(X, Y, Z) {
        return (0, SampFunctions_1.SetVehicleAngularVelocity)(this._vehicleId, X, Y, Z);
    }
    GetVehicleDamageStatus() {
        return (0, SampFunctions_1.GetVehicleDamageStatus)(this._vehicleId);
    }
    UpdateVehicleDamageStatus(panels, doors, lights, tires) {
        return (0, SampFunctions_1.UpdateVehicleDamageStatus)(this._vehicleId, panels, doors, lights, tires);
    }
    SetVehicleVirtualWorld(worldid) {
        return (0, SampFunctions_1.SetVehicleVirtualWorld)(this._vehicleId, worldid);
    }
    GetVehicleVirtualWorld() {
        return (0, SampFunctions_1.GetVehicleVirtualWorld)(this._vehicleId);
    }
    IsValidVehicle() {
        return (0, SampFunctions_1.IsValidVehicle)(this._vehicleId);
    }
}
exports.SampVehicleNativeFunctions = SampVehicleNativeFunctions;
//# sourceMappingURL=SampVehicleNativeFunctions.js.map